Bootstrap: docker
From: rockylinux:8.5.20220308
# Note: We are using this because its the base OS used by Hyak compute nodes
# The idea is that We have the best chances to find slurm modules of the 
# exact right versions to integrate into the container, and this will make
# it possible to build off hyak and run on hyak, with minimal scripting
# done at runtime for things like mpi which requre same version inside and 
# outside the container 

Stage: devel
# Primary reasons to do stages were size and control of MPI impl. The thought is to 
# Avoid choosing an exact version of MPI at build time so long as a "close enough" version is in use
# and then swap out the libraries at runtime. This has the advantage of not having to build 
# the container on Hyak because automating a build process there is annoying due to auth-ing into
# a compute node.
# 
# Size was not much benefit, currently keeping it to avoid build stage having to be on hyak



%files
	# Copy the ldasoft tree into the container
	${SOURCE_DIR} /src/

%post
	# Enable EPEL (Extra packages for enterprise linux)
	# and the powertools/crb repositories
	sed -i s/enabled=0$/enabled=1/g /etc/yum.repos.d/Rocky-PowerTools.repo
	dnf -y install epel-release
	#dnf -y install epel-release 'dnf-command(config-manager)'
	#crb enable
	
	# Install our build deps
	# TODO: Installing hdf5 and hdf5-devel fixes ldasoft build. 
	# Open questions: 
        #           Do we need both at build time? 
        #           Is it linking against something that will let it use mpi?
	# TODO: Do we want hdf5-openmpi-static or hdf5-openmpi-devel or both

	# Vs below, this adds hdf5-openmpi in lieu of straight hdf5	
	yum -y install cmake git gsl-devel openmpi-devel hdf5-devel hdf5-openmpi hdf5-openmpi-devel
	

	# known working at least for build
	#yum -y install cmake git gsl-devel openmpi-devel hdf5-devel hdf5 hdf5-openmpi-devel

	
	# TODO check version of mpi

	
	# Build and install MBH from source
	#
	# TODO Ergonomics: What is the right place to get MBH from? is git okay, or 
	# will this typically be a local checkout that we should build the ability 
	# to specify

	export MBH_GIT="https://github.com/mtauraso/LISA-Massive-Black-Hole.git"
	export MBH_BRANCH="build-fixup" 

	export PATH="/usr/lib64/openmpi:/usr/lib64/openmpi/bin:${PATH}"

	git clone --branch ${MBH_BRANCH} ${MBH_GIT} /src/mbh
	cd /src/mbh
		./install.sh /src/mbh-install
	cd -

	# Build and install ldasoft
	# Tell ldasoft where mbh is
	export CMAKE_PREFIX_PATH="/src/mbh-install/:${CMAKE_PREFIX_PATH}"
	cd /src/ldasoft
		./install.sh /src/ldasoft-install
	cd -


Bootstrap: docker
From: rockylinux:8.5.20220308
Stage: final
# TODO figure out how MPI binding will really work

%setup
# TODO create mountpoints for MPI /UCX binding (if needed)


%files from devel
	/src/ldasoft-install /src/
	/src/ldasoft /src/
	/src/mbh /src/
	/src/mbh-install /src/

%post
	# Enable EPEL (Extra packages for enterprise linux)
	# and the powertools/crb repositories
	sed -i s/enabled=0$/enabled=1/g /etc/yum.repos.d/Rocky-PowerTools.repo
	dnf -y install epel-release
	#dnf -y install epel-release 'dnf-command(config-manager)'
	#crb enable
	
	# Install our runtime deps
	# which is required for startup scripts in this container
	yum -y install gsl openmpi hdf5 hdf5-openmpi which

	# TODO: Do we want to install mpitests-openmpi ?
	# TODO Do we need: hdf5-openmpi and/or hdf5 only ?

	# For debugging ldasoft etc XCXC remove	
	yum -y install gdb
	yum -y install 'dnf-command(debuginfo-install)'
	yum -y debuginfo-install glibc gsl hdf5 hdf5-openmpi hwloc-libs libaec libevent libgomp openmpi openmpi-devel openssl-libs zlib ucx

	BUILD_DATE=$(date)
	echo "export BUILD_DATE=\"${BUILD_DATE}\"" >> $APPTAINER_ENVIRONMENT

%runscript
	echo "LDASoft container built: $BUILD_DATE"
	mpirun -V
	echo "MPI loaded from $(dirname $(which mpirun))"
	# TODO: Can we improve this so the container reports whether it is in Bind/hybrid mode
	#       Container would need to be aware if MPI location is in --bind list or internal

	ucx_info -v
	echo "UCX loaded from $(dirname $(which ucx_info))"	

	# Interepret the first argument as a command and the rest as arguments to that command
	#$1 ${@:2}
	$@


%environment
	# Put the ldasoft and mbh tools on the path
	export PATH=/src/ldasoft-install/bin:/src/mbh-install/bin:$PATH

	# Put the openmpi versions of libraries on LD_LIBRARY_PATH and PATH
	# When we bind the container these should get overwritten by any outside versions provided.
	export LD_LIBRARY_PATH=/usr/lib64/openmpi/lib:$LD_LIBRARY_PATH
	export PATH=/usr/lib64/openmpi/bin:$PATH

